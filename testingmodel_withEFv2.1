import cv2
import os
import numpy as np
from datetime import datetime, timedelta
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns
import time
import pandas as pd

# Configuration
RECOGNIZER_PATH = 'Trainer.yml'
USER_INFO_FILE = 'user_info.csv'
RECOGNIZED_FACES_DIR = 'recognized_faces'
LOG_DIR = 'performance_logs'
CM_DIR = 'confusion_matrices'
PH_TIME_OFFSET = 8
MIN_CONFIDENCE_FOR_RECOGNITION = 50

y_true = []
y_pred = []
times = []

def get_philippine_time():
    return datetime.utcnow() + timedelta(hours=PH_TIME_OFFSET)

def load_name_mapping():
    name_mapping = {}
    try:
        with open(USER_INFO_FILE, "r") as file:
            for line in file:
                parts = line.strip().split(',')
                if len(parts) < 2:
                    print(f"Skipping invalid line: {line}")
                    continue
                id = parts[0].strip()
                name = ','.join(parts[1:]).strip()
                name_mapping[int(id)] = name
    except FileNotFoundError:
        print(f"Error: {USER_INFO_FILE} not found")
        exit(1)
    except ValueError as e:
        print(f"Error reading USER_INFO_FILE: {e}")
        exit(1)
    return name_mapping

def evaluate_system(y_true, y_pred):
    report_dir = "reports"
    if not os.path.exists(report_dir):
        os.makedirs(report_dir)

    if y_true and y_pred:
        cm = confusion_matrix(y_true, y_pred)
        print("Confusion Matrix:")
        print(cm)
        print("\nClassification Report:")
        report = classification_report(y_true, y_pred, output_dict=True)
        print(pd.DataFrame(report).transpose())

        accuracy = accuracy_score(y_true, y_pred)
        precision = precision_score(y_true, y_pred, average='weighted')
        recall = recall_score(y_true, y_pred, average='weighted')
        f1 = f1_score(y_true, y_pred, average='weighted')
        print(f"Accuracy: {accuracy:.4f}")
        print(f"Precision: {precision:.4f}")
        print(f"Recall: {recall:.4f}")
        print(f"F1-Score: {f1:.4f}")

        plt.figure(figsize=(10, 7))
        sns.heatmap(cm, annot=True, fmt="d", cmap='Blues', xticklabels=np.unique(y_true + y_pred), yticklabels=np.unique(y_true + y_pred))
        plt.xlabel('Predicted Labels')
        plt.ylabel('True Labels')
        plt.title('Confusion Matrix')
        plt.savefig(os.path.join(report_dir, 'Confusion_Matrix.png'))
        plt.close()

        plt.figure(figsize=(12,7))
        sns.heatmap(pd.DataFrame(report).iloc[:-1, :].T, annot=True, cmap='Blues', fmt=".2f")
        plt.title('Classification Report')
        plt.savefig(os.path.join(report_dir, 'Classification_Report.png'))
        plt.close()
    else:
        print("No data available for generating reports.")

def calculate_accuracy(confidence, min_confidence):
    if confidence >= min_confidence:
        return 0
    else:
        return max(0, 100 * (1 - (confidence / min_confidence)))

def main():
    if not os.path.exists(RECOGNIZED_FACES_DIR):
        os.makedirs(RECOGNIZED_FACES_DIR)
    if not os.path.exists(LOG_DIR):
        os.makedirs(LOG_DIR)
    if not os.path.exists(CM_DIR):
        os.makedirs(CM_DIR)

    video = cv2.VideoCapture(0)
    recognizer = cv2.face.LBPHFaceRecognizer_create()
    recognizer.read(RECOGNIZER_PATH)
    name_mapping = load_name_mapping()
    correct_confidences = []

    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

    last_saved_time = None

    while True:
        ret, frame = video.read()
        if not ret:
            print("Failed to grab frame")
            break

        # Resize frame to half its original size
        frame = cv2.resize(frame, (frame.shape[1] // 2, frame.shape[0] // 2))

        start_time = time.time()
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
        
        for (x, y, w, h) in faces:
            face = frame[y:y+h, x:x+w]
            face_gray = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)
            face_resized = cv2.resize(face_gray, (400, 400))
            serial, confidence = recognizer.predict(face_resized)
            accuracy = calculate_accuracy(confidence, MIN_CONFIDENCE_FOR_RECOGNITION)
            print(f"ID: {serial}, Confidence: {confidence}, Accuracy: {accuracy:.2f}%")

            cv2.imshow("Detected Face", face_resized)

            if confidence < MIN_CONFIDENCE_FOR_RECOGNITION:
                name = name_mapping.get(serial, "Unknown")
                label = f"ID {serial}: {name} ({accuracy:.2f}%)" if name != "Unknown" else f"Unknown ({accuracy:.2f}%)"
            else:
                name = "Unknown"
                label = f"Unknown ({accuracy:.2f}%)"

            y_pred.append(name)
            y_true.append(name)

            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
            cv2.putText(frame, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 2)

            current_time = get_philippine_time()
            timestamp = current_time.strftime('%Y-%m-%d %H:%M:%S')
            display_text = f"{timestamp} - {name} ({accuracy:.2f}%)"
            cv2.putText(frame, display_text, (10, frame.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

            if last_saved_time is None or (current_time - last_saved_time).total_seconds() > 20:
                filename = f"{timestamp.replace(':', '-')}-{name}.jpg"
                cv2.imwrite(os.path.join(RECOGNIZED_FACES_DIR, filename), frame)
                last_saved_time = current_time

        cv2.imshow("Frame", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

        end_time = time.time()
        times.append(end_time - start_time)

    video.release()
    cv2.destroyAllWindows()
    evaluate_system(y_true, y_pred)

    # Calculate and display average detection speed
    if times:
        avg_time = sum(times) / len(times)
        fps = 1 / avg_time
        print(f"Average Detection Speed: {avg_time:.4f} seconds per frame ({fps:.2f} FPS)")
    else:
        print("No detections to calculate speed.")

if __name__ == "__main__":
    main()

cv2.waitKey(1)
